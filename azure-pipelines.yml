trigger:
- master
- release/*

jobs:
  - job: Build
    variables:
      npm_config_runtime: ''
      npm_config_target: ''
      npm_config_disturl: ''
    strategy:
      matrix:
        linux_node_8_x:
          image_name: 'ubuntu-16.04'
          node_version: 8.15.0
        linux_node_10_x:
          image_name: 'ubuntu-16.04'
          node_version: 10.15.0
        linux_node_11_x:
          image_name: 'ubuntu-16.04'
          node_version: 11.7.0
        linux_electron_2_x:
          image_name: 'ubuntu-16.04'
          node_version: 8.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://atom.io/download/electron'
        linux_electron_4_x:
          image_name: 'ubuntu-16.04'
          node_version: 10.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://atom.io/download/electron'
        macOS_node_8_x:
          image_name: 'macos-10.13'
          node_version: 8.15.0
        macOS_node_10_x:
          image_name: 'macos-10.13'
          node_version: 10.15.0
        macOS_node_11_x:
          image_name: 'macos-10.13'
          node_version: 11.7.0
        macOS_electron_2_x:
          image_name: 'macos-10.13'
          node_version: 8.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://atom.io/download/electron'
        macOS_electron_4_x:
          image_name: 'macos-10.13'
          node_version: 10.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://atom.io/download/electron'
        win64_node_8_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
        win64_node_10_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
        win64_node_11_x:
          image_name: 'vs2017-win2016'
          node_version: 11.7.0
        win64_electron_2_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://atom.io/download/electron'
        win64_electron_4_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://atom.io/download/electron'
        win32_node_8_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
          node_arch: '32'
        win32_node_10_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          node_arch: '32'
        win32_node_11_x:
          image_name: 'vs2017-win2016'
          node_version: 11.7.0
          node_arch: '32'
        win32_electron_2_x:
          image_name: 'vs2017-win2016'
          node_version: 8.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 2.0.17
          npm_config_disturl: 'https://atom.io/download/electron'
          node_arch: '32'
        win32_electron_4_x:
          image_name: 'vs2017-win2016'
          node_version: 10.15.0
          npm_config_runtime: 'electron'
          npm_config_target: 4.0.6
          npm_config_disturl: 'https://atom.io/download/electron'
          node_arch: '32'
    pool:
      vmImage: $(image_name)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: $(node_version)
      condition: ne(variables['node_arch'], '32')
      displayName: 'Install Node.js $(node_version)'
    - bash: |
        choco install -y nvm
        export PATH=$PATH:$NVM_HOME
        nvm install $(NODE_VERSION) $(NODE_ARCH)
        nvm use $(NODE_VERSION) $(NODE_ARCH)
        ln -sf "$NVM_SYMLINK/node" "$NODE_SYMLINK/node"
      env: {
        NVM_HOME: "/C/ProgramData/nvm",
        NVM_SYMLINK: "/C/ProgramData/nvm/v$(node_version)",
        NODE_SYMLINK: "/C/Program Files/nodejs",
        NODE_VERSION: $(node_version),
        NODE_ARCH: $(node_arch),
      }
      condition: and(contains(variables['image_name'], 'win'), eq(variables['node_arch'], '32'))
      displayName: 'Install Node.js $(node_version) 32-bit'
    - bash: |
        sudo apt-get update
        sudo apt-get install ninja-build
      condition: contains(variables['image_name'], 'ubuntu')
      displayName: 'Install ninja on Linux'
    - bash: |
        brew install ninja
      condition: contains(variables['image_name'], 'mac')
      displayName: 'Install ninja on macOS'
    - bash: |
        node -v
        npm i --build-from-source
        npm run package-prebuilt
      env: {
        npm_config_runtime: $(npm_config_runtime),
        npm_config_target: $(npm_config_target),
        npm_config_disturl: $(npm_config_disturl),
        NODE_VERSION: $(node_version),
        NODE_ARCH: $(node_arch),
        NODE_PRE_GYP_GITHUB_TOKEN: $(wayland_github_token)
      }
      displayName: 'Build'
    - bash: |
        cp -R build/stage/**/*.tar.gz "$(Build.ArtifactStagingDirectory)"
      displayName: 'Copy artifacts'
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: 'waylandCI'
        repositoryName: 'NordicSemiconductor/pc-nrfjprog-js'
        action: 'edit'
        tagSource: 'Git tag'
        tag: '$(Build.SourceBranchName)'
        assetUploadMode: 'replace'
        isDraft: 'true'
        addChangeLog: 'false'

  - job: Test
    dependsOn: [
      Build,
    ]
    strategy:
      matrix:
        linux:
          osType: 'linux'
        mac:
          osType: 'mac'
        win64:
          osType: 'win64'
        win32:
          osType: 'win32'
    pool: server
    steps:
    - task: InvokeRESTAPI@1
      name: Test
      inputs:
        connectionType: 'connectedServiceName' # Options: connectedServiceName, connectedServiceNameARM
        serviceConnection: 'waylandJenkins' # Required when connectionType == ConnectedServiceName
        method: 'POST' # Options: OPTIONS, GET, HEAD, POST, PUT, DELETE, TRACE, PATCH
        urlSuffix: 'view/pc-nrfjprog-js/job/pc-nrfjprog-js-$(osType)/buildWithParameters?BRANCH=$(Build.SourceBranchName)&VSTS_URL=$(system.CollectionUri)&TOKEN=$(system.AccessToken)&PROJECT_ID=$(system.teamProjectId)&HUB_NAME=$(system.hostType)&PLAN_ID=$(system.planId)&TASK_ID=$(system.taskInstanceId)&JOB_ID=$(system.jobId)' # Optional
        waitForCompletion: 'true' # Options: true, false
